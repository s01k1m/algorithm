'''
## Binary Search Tree 이진 탐색 트리의 특징
1. 탐색작업을 효율적으로 하기 위한 자료구조
2. 모든 원소는 서로 다른 유일한 키를 가짐
3. key(왼쪽 서브트리) < key(루트 노드) < key(오른쪽 서브트리)
4. 왼쪽 서브트리와 오른쪽 서브트리도 이진 탐색 트리이다.
5. **중위 순회**하면 **오름차순**으로 정렬된 값을 얻을 수 있다.
'''

def in_order(node):
    global val
    # 이진 탐색 트리는 완전 이진 트리를 유지 하여야 하므로
    # 노드의 개수 N보다 큰 노드 번호는 있을 수 없음
    # 완전 이진 트리의 최대 노드 번호는 2**(h+1)-1
    if node <= N:
        # 중위 순회
        in_order(node * 2)
        tree[node] = val
        val += 1
        in_order(node * 2 + 1)


T = int(input())
for tc in range(1, T+1):
    N = int(input())

    tree= [0]*(N+1)
    # def complete_binary_tree(N):
        # 완전 이진 트리의 최대 노드 개수는 2^(h+1)-1 단 h는 레벨
        # 리스트를 이용한 이진 트리 표현
        # 0 인덱스는 이용하지 않을 것이기 때문에 N+1

        # 이진 탐색 트리는 어떤 경우에도 저장된 값이 왼쪽 서브트리의 루트 <현재 노드 <오른쪽 서브 트리의 루트인 규칙을 만족한다.


    val = 1

    in_order(1)

    # ans는 이진탐색 트리의 루트, N/1번 노드에 저장된 갓을 출력
    print(f'#{tc} {tree[1]} {tree[N//2]}')